package cuadrillas.trabajadores;

public enum JornadasSymbol
{
  ONE,TWO,THREE
}

public class Datos 
{	
	public static final int NUM_CUADRILLAS	= 10;
	public static final int NUM_TURNOS		= 3;
	
	// matriz de coste de las 10 cuadrillas para cada uno de los 3 turnos
	public static final int[][] matrizCostes =
		{
				{1000,	1100,	1500,	2500,	3200,	2500,	2100,	2100,	1450,	2200},	// turno1
				{1400,	2100,	1900,	2400,	2050,	2000,	1850,	3050,	1600,	1500},	// turno2
				{2100,	3100,	2050,	2100,	2100,	1400,	1900,	2050,	2150,	1900}	// turno3	
		};	
	
	// matriz de productividad de las 10 cuadrillas para cada uno de los 3 turnos
	public static final int[][] matrizProductividad =
		{
				{50,	42,	42,	40,	50,	50,	40,	52,	50,	44},  // turno1
				{52,	50,	53,	40,	30,	50,	40,	50,	45,	50},  // turno2
				{45,	30,	35,	25,	50,	30,	30,	42,	35,	45}   // turno3
		};	
}

package cuadrillas.trabajadores;
import java.util.Random;
import org.opt4j.core.genotype.SelectGenotype;
import org.opt4j.core.problem.Creator;

public class JornadasCreator implements Creator<SelectGenotype<JornadasSymbol>> 
{
  public SelectGenotype<JornadasSymbol> create()
  {
    JornadasSymbol[] Symbols = {JornadasSymbol.ONE, JornadasSymbol.TWO, JornadasSymbol.THREE};
    SelectGenotype<JornadasSymbol> genotype = new SelectGenotype<JornadasSymbol>(Symbols);
    // el genotipo estara formado por "numeroSimbolos" de Ã­ndice elegidos al azar
    // en nuestro caso la poblacion sera un conjunto de individuos, donde cada individuo son 10 simbolos
    genotype.init(new Random(), Datos.NUM_CUADRILLAS);
    
    return genotype;
  }
}


package cuadrillas.trabajadores;

import java.util.ArrayList;
import org.opt4j.core.genotype.SelectGenotype;
import org.opt4j.core.problem.Decoder;

public class JornadasDecoder implements Decoder<SelectGenotype<JornadasSymbol>, ArrayList<JornadasSymbol>> 
{
  public ArrayList<JornadasSymbol> decode(SelectGenotype<JornadasSymbol> genotype)
  {
    ArrayList<JornadasSymbol> phenotype = new ArrayList<JornadasSymbol>();
    // codigo para que el fenotipo cumpla restricciones
    for (int i = 0; i < genotype.size(); i++)
    {
      phenotype.add(genotype.getValue(i));
    }
    return phenotype;
  }
}

package cuadrillas.trabajadores;

import java.util.ArrayList;
import org.opt4j.core.Objectives;
import org.opt4j.core.Objectives.Sign;
import org.opt4j.core.problem.Evaluator;

public class JornadasEvaluator implements Evalutor<ArrayList<JornadasSymbol>>
{
  public Objectives evaluate (ArrayList<JornadasSymbol> phenotype)
  {
  	int coste = Datos.matrizCostes[0][0];
  	int produ = Datos.matrizProductividad[0][0];
    	for (int i = 0; i < phenotype.size(); i++)
    	{
		switch (phenotype.get(i))
		{
			case ONE: coste += Datos.matrizCostes[1][i]; break;
				produ += Datos.matrizProductividad[1][i]; break;
			case TWO: coste += Datos.matrizCostes[2][i]; break;
				produ += Datos.matrizProductividad[2][i]; break;
			case THREE: coste += Datos.matrizCostes[3][i]; break;
				produ += Datos.matrizProductividad[3][i]; break;
		}
	}
   	 Objectives objectives = new Objectives();
	 objectives.add("Valor objetivo-MAX", Sign.MAX, Math.abs(produ - coste));
	 return objectives
  }
}



package cuadrillas.trabajadores;

import java.util.ArrayList;
import org.opt4j.core.Objectives;
import org.opt4j.core.Objectives.Sign;
import org.opt4j.core.problem.Evaluator;

public class JornadasEvaluator implements Evalutor<ArrayList<JornadasSymbol>>
{
  protected void config() {
  	bindProblem(JornadasCreator.class, JornadasDecoder.class, JornadasEvaluator.class);
  }
}


